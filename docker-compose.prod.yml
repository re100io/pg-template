version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: pg-template:latest
    container_name: pg-template-app
    restart: unless-stopped
    ports:
      - "7001:7001"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/pg_template_prod
      - SPRING_DATASOURCE_USERNAME=pg_user
      - SPRING_DATASOURCE_PASSWORD=pg_password
      - JAVA_OPTS=-Xmx1g -Xms1g -server -XX:+UseG1GC
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: pg-template-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pg_template_prod
      - POSTGRES_USER=pg_user
      - POSTGRES_PASSWORD=pg_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pg_user -d pg_template_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
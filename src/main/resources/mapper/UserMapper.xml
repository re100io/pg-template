<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.re100io.repository.UserRepository">

    <!-- Result Map for User entity -->
    <resultMap id="UserResultMap" type="com.re100io.entity.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="fullName" column="full_name"/>
        <result property="isActive" column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- Base column list -->
    <sql id="Base_Column_List">
        id, username, password, email, full_name, is_active, created_at, updated_at
    </sql>

    <!-- Find user by ID -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE id = #{id}
    </select>

    <!-- Find user by username -->
    <select id="findByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE username = #{username}
    </select>

    <!-- Find user by email -->
    <select id="findByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE email = #{email}
    </select>

    <!-- Check if username exists -->
    <select id="existsByUsername" parameterType="string" resultType="int">
        SELECT COUNT(*) 
        FROM users 
        WHERE username = #{username}
    </select>

    <!-- Check if email exists -->
    <select id="existsByEmail" parameterType="string" resultType="int">
        SELECT COUNT(*) 
        FROM users 
        WHERE email = #{email}
    </select>

    <!-- Check if user exists by ID -->
    <select id="existsById" parameterType="long" resultType="int">
        SELECT COUNT(*) 
        FROM users 
        WHERE id = #{id}
    </select>

    <!-- Find all users -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        ORDER BY created_at DESC
    </select>

    <!-- Find all active users -->
    <select id="findAllActiveUsers" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE is_active = true 
        ORDER BY created_at DESC
    </select>

    <!-- Search users by keyword -->
    <select id="searchUsers" parameterType="string" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE username LIKE CONCAT('%', #{keyword}, '%') 
           OR email LIKE CONCAT('%', #{keyword}, '%')
        <if test="keyword != null and keyword != ''">
           OR full_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- Insert new user -->
    <insert id="insert" parameterType="com.re100io.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            username, 
            password, 
            email, 
            full_name, 
            is_active, 
            created_at, 
            updated_at
        ) VALUES (
            #{username}, 
            #{password}, 
            #{email}, 
            #{fullName}, 
            #{isActive}, 
            #{createdAt}, 
            #{updatedAt}
        )
    </insert>

    <!-- Update user -->
    <update id="update" parameterType="com.re100io.entity.User">
        UPDATE users 
        SET 
            full_name = #{fullName}, 
            email = #{email}, 
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- Delete user by ID -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM users 
        WHERE id = #{id}
    </delete>

    <!-- Advanced queries with dynamic SQL -->

    <!-- Find users with dynamic conditions -->
    <select id="findUsersWithConditions" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="isActive != null">
                AND is_active = #{isActive}
            </if>
            <if test="startDate != null">
                AND created_at >= #{startDate}
            </if>
            <if test="endDate != null">
                AND created_at &lt;= #{endDate}
            </if>
        </where>
        ORDER BY created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- Batch insert users -->
    <insert id="batchInsert" parameterType="list">
        INSERT INTO users (
            username, 
            password, 
            email, 
            full_name, 
            is_active, 
            created_at, 
            updated_at
        ) VALUES
        <foreach collection="list" item="user" separator=",">
            (
                #{user.username}, 
                #{user.password}, 
                #{user.email}, 
                #{user.fullName}, 
                #{user.isActive}, 
                #{user.createdAt}, 
                #{user.updatedAt}
            )
        </foreach>
    </insert>

    <!-- Update user status -->
    <update id="updateUserStatus">
        UPDATE users 
        SET 
            is_active = #{isActive}, 
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- Count users by status -->
    <select id="countUsersByStatus" parameterType="boolean" resultType="int">
        SELECT COUNT(*) 
        FROM users 
        WHERE is_active = #{isActive}
    </select>

    <!-- Find users by IDs -->
    <select id="findByIds" resultMap="UserResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM users 
        WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY created_at DESC
    </select>

</mapper>